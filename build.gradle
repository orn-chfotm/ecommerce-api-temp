plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.12'
    id 'io.spring.dependency-management' version '1.1.6'
}

bootJar.enabled = 'false'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}
allprojects {
    group = 'com.build'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    ext {
        JJWT_VERSION = "0.12.3"
    }

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // spring-boot
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'

        // H2
        runtimeOnly 'com.h2database:h2'

        // docs
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

        // lomboc
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    test {
        useJUnitPlatform()
    }
}

project(":module-domain") {
    dependencies {
        implementation project(':module-core')

        // QueryDsl
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    }

    /* QueryDSL Sett */
    def generated = file("${buildDir}/generated/querydsl")

    tasks.withType(JavaCompile) {
        options.getGeneratedSourceOutputDirectory().set(file(generated))
    }

    sourceSets {
        main {
            java {
                srcDirs += generated
            }
        }
    }

    clean {
        delete file(generated)
    }
}

project(":module-core") {
    dependencies {
        // JWT
        implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
        runtimeOnly "io.jsonwebtoken:jjwt-gson:${JJWT_VERSION}"
        runtimeOnly "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}"
    }
}

project(":module-admin") {
    dependencies {
        implementation project(':module-domain')
        implementation project(':module-core')
    }
}

project(":module-client") {
    dependencies {
        implementation project(':module-domain')
        implementation project(':module-core')
    }
}